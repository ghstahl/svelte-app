{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\Welcome.html"
  ],
  "sourcesContent": [
    "<h1>Welcome Svelte</h1>\r\n<button on:click=\"goHome()\">Go Home</button>\r\n<div>\r\n\r\n\t<form on:submit='handleSubmit( event )'>\r\n\t\t<label>SessionData for {{spaRecord.SpaRecord.Key}}</label>\r\n\t\t<input bind:value='test' type='text'>\r\n\t\t\r\n\t\t<button type='submit'>Store</button>\r\n\t  </form>\r\n</div>\r\n\r\n<p>Count: {{count}}</p>\r\n<button on:click='incrementCount()'>+1</button>\r\n<button on:click='corsTest()'>corsTest</button>\r\n<p>pet: {{pet}}</p>\r\n<button on:click='corsTest2()'>corsTest2</button>\r\n<p>corsTest2: {{corsTest2}}</p>\r\n<button on:click='fetchIdentity()'>fetchIdentity</button>\r\n<p>identity.oidc.access_token: {{identity.oidc.access_token}}</p>\r\n<p>identity.access_code: {{identity.access_code}}</p>\r\n\r\n\r\n\r\n{{#if identity.oidc.access_token}}\r\n\t<button on:click='requestToken()'>requestToken</button>\r\n\t<p>token: {{token}}</p>\r\n\t{{#if token}}\r\n\t\t<button on:click='checkAuthenticatedToken()'>checkAuthenticatedToken</button>\r\n\t\t<p>checkAuthenticatedToken.message: {{checkAuthenticatedToken.message}}</p>\r\n\t{{/if}}\r\n{{/if}}\r\n\r\n<br/>\r\n{{#if identity.oidc.access_token}}\r\n \r\n\t<button on:click='establishAuthenticatedSession()'>establishAuthenticatedSession</button>\r\n    <p>establishSession.message: {{establishSession.message}}</p>\r\n    <button on:click='signOut()'>signOut</button>\r\n\t<p>signout.message: {{signoutResult.message}}</p>\r\n\t<button on:click='checkAuthenticatedSession()'>checkAuthenticatedSession</button>\r\n\t<p>checkAuthenticatedSession.message: {{checkAuthenticatedSession.message}}</p>\r\n\r\n{{/if}}\r\n<style>\r\n\th1 {\r\n\t\tcolor: purple;\r\n\t}\r\n</style>\r\n\r\n<script>\r\n  import SvelteRouter from 'svelte-router'\r\n  const { createRouter } = SvelteRouter\r\n  export default {\r\n    data () {\r\n\t\treturn {\r\n\t\t  spaRecord:viewBagRecord,\r\n\t\t  requestToken:{},\r\n          establishSession:{},\r\n          signoutResult:{},\r\n\t\t  checkAuthenticatedSession:{},\r\n\t\t  checkAuthenticatedToken:{},\r\n\t\t  user: {loggedIn: false},\r\n\t\t  pet:\"\",\r\n\t\t  token:null,\r\n\t\t  identity:{oidc:{\r\n\t\t\taccess_token:null\r\n\t\t  }},\r\n\t\t  count:0,\r\n\t\t  corsTest2:\"\"\r\n\t\t}\r\n\t  },\r\n\t  oncreate() {\r\n\t\t//read user object from localStorage\r\n\t\tconst user = localStorage.getItem('user');\r\n\t\tif(user) {\r\n\t\t  this.set({ user: {loggedIn: true} });\r\n\t\t  return;\r\n\t\t}\r\n\t  },\r\n  \r\n\t  ondestroy() {\r\n\t  },\r\n  \r\n\t  components: {\r\n \r\n\t  },\r\n    methods: {\r\n\t\thandleSubmit ( event ) {\r\n\t\t\t// prevent the page from reloading\r\n\t\t\tevent.preventDefault();\r\n\t\t\tvar model = this.get();\r\n\r\n\t\t\tvar value = this.get( 'test' );\r\n\t\t\tvar body = JSON.stringify(\r\n            {\r\n                key: model.spaRecord.SpaRecord.Key,\r\n                data: value\r\n            });\r\n\r\n\t\t\tfetch('/api/extSpa/session/store-data',\r\n            {\r\n\t\t\t\tcredentials: 'include',\r\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody:body\r\n            }) \r\n\t\t\t.catch(function(error) {\r\n\t\t\t\tconsole.log('/api/extSpa/session/store-data failed:' + error.message);\r\n\t\t\t});\r\n\r\n\t\t\tconsole.log( 'value', value );\r\n\t},\r\n      goHome () {\r\n        createRouter.push('/')\r\n      },\r\n      incrementCount(){\r\n\t\t\tlet model = this.get();\r\n\t\t\tthis.set({ count: model.count + 1 });\r\n\t\t},\r\n\t\tfetchIdentity(){\r\n\t\t\tlet self = this;\r\n\t\t\tvar model = this.get();\r\n\t\t\tvar body = JSON.stringify(\r\n            {\r\n                query: 'query q($id: String!){identity(input: { id: $id }) {access_code oidc}}',\r\n                variables: '{\"id\": \"NOF\"}',\r\n                operationName: 'q'\r\n            });\r\n        \tfetch('/api/graphql',\r\n            {\r\n                credentials: 'include',\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: body\r\n            })\r\n            .then(res => res.json())\r\n            .then(function (res) {\r\n\t\t\t\tconsole.log(res.data);\r\n\t\t\t\tself.set({ identity: res.data.identity });\r\n\t\t\t\tconsole.log(model);\r\n            });\r\n\t\t},\r\n\t\trequestToken(){\r\n\t\t\t\r\n\t\t\tlet self = this;\r\n\t\t\tvar model = this.get();\r\n\t\t\tconsole.log(model);\r\n\t\t\tvar url = \"https://p7-referencewebapp-jwtauthapi.azurewebsites.net/api/Identity/request-token\";\r\n\t\t\tvar body2 = JSON.stringify(\r\n            {\r\n                username: 'dog',\r\n                password: 'I am dog'\r\n            });\r\n\t\t\tfetch(url,\r\n            {\r\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody:body2\r\n            })\r\n            .then(res => res.json())\r\n            .then(function (res) {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\tself.set({ token: res.token });\r\n\t\t\t\r\n            });\r\n\t\t\t\r\n\t\t},\r\n\t\tcheckAuthenticatedToken(){\r\n\t\t\tlet self = this;\r\n\t\t\tvar model = this.get();\r\n\t\t\tconsole.log(model);\r\n\t\t\tvar model = this.get();\r\n\t\t\tconsole.log(model);\r\n\t\t \r\n\t\t\tvar url = \"https://p7-referencewebapp-jwtauthapi.azurewebsites.net/api/Identity/check-authentication\";\r\n\t\t\tfetch(url,\r\n            {\r\n\t\t\t\tcredentials: 'include',\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: {\r\n\t\t\t\t\t'Authorization': 'Bearer '+model.token, \r\n\t\t\t\t\t'Content-Type': 'text/plain'\r\n\t\t\t\t}\r\n\t\t\t \r\n            })\r\n            .then(res => res.text())\r\n            .then(function (res) {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\tself.set({ checkAuthenticatedToken:{ message:res }});\r\n            })\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\tself.set({ checkAuthenticatedToken:{ message:error.message }});\r\n\t\t\t\tconsole.log('There has been a problem with your fetch operation: ' + error.message);\r\n\t\t\t});\r\n\t\t},\r\n\t\testablishAuthenticatedSession(){\r\n\t\t\t\r\n\t\t\tlet self = this;\r\n\t\t\tvar model = this.get();\r\n\t\t\tconsole.log(model);\r\n\t\t\tvar url = \"https://p7-referencewebapp-cookieauthapi.azurewebsites.net/api/Identity/sign-in?username=herb&password=1234\";\r\n\t\t\tfetch(url,\r\n            {\r\n                credentials: 'include',\r\n\t\t\t\theaders: { 'Content-Type': 'text/plain' },\r\n\t\t\t\tmethod: 'GET'\r\n            })\r\n            .then(function (res) {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\tself.set({ establishSession:{ message:\"Success\" }});\r\n            }).catch(function(error) {\r\n\t\t\t\tself.set({ establishSession:{ message:error.message }});\r\n\t\t\t\tconsole.log('There has been a problem with your fetch operation: ' + error.message);\r\n\t\t\t});\r\n\t\t\t\r\n        },\r\n        signOut(){\r\n\t\t\t\r\n\t\t\tlet self = this;\r\n\t\t\tvar model = this.get();\r\n\t\t\tconsole.log(model);\r\n\t\t\tvar url = \"https://p7-referencewebapp-cookieauthapi.azurewebsites.net/api/Identity/sign-out\";\r\n\t\t\tfetch(url,\r\n            {\r\n                credentials: 'include',\r\n\t\t\t\theaders: { 'Content-Type': 'text/plain' },\r\n\t\t\t\tmethod: 'GET'\r\n            })\r\n            .then(function (res) {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\tself.set({ signoutResult:{ message:\"Success\" }});\r\n            }).catch(function(error) {\r\n\t\t\t\tself.set({ signoutResult:{ message:error.message }});\r\n\t\t\t\tconsole.log('There has been a problem with your fetch operation: ' + error.message);\r\n\t\t\t});\r\n\t\t\t\r\n\t\t},\r\n\t\t\r\n\t\tcheckAuthenticatedSession(){\r\n\t\t\tlet self = this;\r\n\t\t\tvar model = this.get();\r\n\t\t\tconsole.log(model);\r\n\t\t\tvar url = \"https://p7-referencewebapp-cookieauthapi.azurewebsites.net/api/Identity/check-authentication\";\r\n\t\t\tfetch(url,\r\n            {\r\n\t\t\t\tcredentials: 'include',\r\n\t\t\t\tmethod: 'GET',\r\n\t\t\t\theaders: { 'Content-Type': 'text/plain' }\r\n            })\r\n            .then(res => res.text())\r\n            .then(function (res) {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\tself.set({ checkAuthenticatedSession:{ message:res }});\r\n            })\r\n\t\t\t.catch(function(error) {\r\n\t\t\t\tself.set({ checkAuthenticatedSession:{ message:error.message }});\r\n\t\t\t\tconsole.log('There has been a problem with your fetch operation: ' + error.message);\r\n\t\t\t});\r\n\t\t},\r\n\t\tcorsTest(){\r\n\t\t\tlet self = this;\r\n\t\t\tlet model = this.get();\r\n\t\t\t// do some CORS\r\n\t\t\tvar body2 = JSON.stringify(\r\n            {\r\n                name: 'dog',\r\n                description: 'I am dog'\r\n            });\r\n        \tfetch('https://pingo7api.azurewebsites.net/api2/OpenApi/Create',\r\n            {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: body2\r\n            })\r\n            .then(res => res.json())\r\n            .then(function (res) {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\tself.set({ pet: JSON.stringify(res) });\r\n\t\t\t\r\n            });\r\n\t\t},\r\n\t\tcorsTest2() {\r\n\t\t\tlet self = this;\r\n\t\t\tlet model = this.get();\r\n\t\t\tfetch('https://pingo7api.azurewebsites.net/api2/OpenApi/testing2',\r\n            {\r\n                method: 'GET',\r\n                headers: { 'Content-Type': 'text/plain' },\r\n            })\r\n            .then(res => res.json())\r\n            .then(function (res) {\r\n\t\t\t\tconsole.log(res);\r\n\t\t\t\tself.set({ corsTest2: \"api3:\" + JSON.stringify(res) });\r\n            });\r\n\t\t} \r\n    },\r\n\t  helpers: {\r\n\t\t \r\n\t  }\r\n  }\r\n</script>"
  ],
  "names": [],
  "mappings": "AA6CC,EAAE,mBAAC,CAAC,AACH,KAAK,CAAE,MAAM,AACd,CAAC"
}